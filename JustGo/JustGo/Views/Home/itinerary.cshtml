@{
    ViewData["Title"] = "itinerary";
    <!-- Layout = null; -->
}
@section Style{
<!-- <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" asp-append-version="true" /> -->
<link rel="stylesheet" href="~/css/main.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<style>
    .footer__waves {
        display: none;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" />

}

<div class="arrange__body">
    <div class="arrange__contain">
        <video autoplay muted loop plays-inline class="arrange__contain-video">
            <source src="~/file/video/highway-f.mp4" type="video/mp4">
        </video>
        <div class="datepicker"></div>
        <div class="datepicker__content">
            <div id="app">
                <input placeholder="開始時間" type="text" onfocus="(this.type='date')" onblur="(this.type='text')"
                    v-model="selectDatelocal">
                <input placeholder="結束時間" type="text" onfocus="(this.type='date')" onblur="(this.type='text')"
                    v-model="selectDateEndlocal">
                <button @@click="culDate" class="btn btn-primary">開始</button>
                <button @@click="saveSchedule" class="btn btn-primary">儲存行程</button>
            </div>
        </div>
        <div class="journey__map">
            <div class="sidebar">
                <div class="sidebar__grid">
                    <div class="grid-item-t">
                        <div id="app5"></div>

                    </div>
                    <div class="grid-item-m">

                        <div id="app4"></div>

                    </div>
                    <div class="grid-item-b">
                        <button class="btn btn-primary">儲存行程</button>
                    </div>
                </div>
            </div>
            <div class="sidebar-hide">
                <button>></button>
                <div id="app2"></div>
            </div>
            <div class="mapbox" id="app3">
                <div id="floating-panel">
                    <button @@click="changeView">我的行程</button>
                </div>
                <div id="map"></div>
            </div>
        </div>

    </div>
</div>



@section Scripts{
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBtVnIXm-IWFLMzIL_XlbCjLyQjSuEVVhk"></script>
<script src="https://unpkg.com/@@googlemaps/markerclusterer/dist/index.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://unpkg.com/vuex@3"></script>
<script src="https://www.itxst.com/package/sortable/Sortable.min.js"></script>
<script src="https://www.itxst.com/package/vuedraggable/vuedraggable.umd.min.js"></script>



<script>
    const store = new Vuex.Store({
        state: {
            map: null,
            travel: [],//旅遊行程
            selectPlaces: [],//搜尋結果
            datetime: [],//每日時間
            duringDate: [],//旅遊期間日期
            markers: [], // 地圖Marker
            markerCluster: null, // 地圖Cluster
            travelTime: [], // 行程時間
            directionsRenderer: null,
            daysindex: 0,
        },

        //由action傳入值,更新state狀態
        mutations: {
            //更新state 搜尋結果
            updateData(state, status) {
                this.state.selectPlaces = status
            },

            //計算行程表時間
            cultime() {
                console.log(1);
                for (let j = 0; j < this.state.travel.length; j++) {
                    let timestamp = this.state.datetime[j]
                    for (let i = 0; i < this.state.travel[j].length; i++) {
                        this.state.travel[j][i].startTime = timestamp
                        let hr = timestamp.substring(0, 2)
                        let min = timestamp.substring(3, 5)
                        let addhr = parseInt((Number(min) + Number(this.state.travel[j][i].min)) / 60)

                        hr = Number(hr) + Number(addhr)
                        min = (Number(min) + Number(this.state.travel[j][i].min)) % 60
                        if (hr > 24) {
                            hr = hr - 24
                        }
                        if (hr < 10) {
                            hr = '0' + hr
                        }
                        if (min < 10) {
                            min = '0' + min
                        }
                        timestamp = hr + ':' + min
                        this.state.travel[j][i].endTime = timestamp
                    }
                }
            },

            initMap(state, payload) {
                state.map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 23.573837, lng: 120.97969 },
                    zoom: 8,  // 0-20
                    mapId: '1d3a304bcea5789e',
                    mapTypeControl: false,  // 換地圖類型
                    streetViewControl: false,  // 街道檢視
                    clickableIcons: false,   // 可不可以點地圖上的點                    
                });
            },

            // 產生地圖標示_景點
            setPlaceMarker(state) {
                if (state.markers && state.markerCluster) {
                    state.markerCluster.clearMarkers();
                    state.markerCluster = null
                    state.markers = [];
                } else if (state.markers) {
                    this.state.markers.forEach((marker) => {
                        marker.setMap(null)
                    });
                    state.markers = [];
                }

                const bounds = new google.maps.LatLngBounds();
                // 產生地點marker
                state.selectPlaces.map((position, i) => {
                    const marker = new google.maps.Marker({
                        position: { lat: position.lat, lng: position.lng },
                    });
                    bounds.extend(marker.position);
                    // 產生infowindow
                    let contentString =
                        `<div id="info">
                                            <p style="color:black">${position.name}</p>
                                    </div>`
                    const infowindow = new google.maps.InfoWindow({
                        content: contentString,
                        disableAutoPan: false,
                    });
                    // 滑過marker開啟infowindow
                    marker.addListener("mouseover", () => {
                        infowindow.open({
                            anchor: marker,
                            map: state.map,
                            shouldFocus: false,
                        });
                        state.infowindow = infowindow
                    });
                    marker.addListener("mouseout", () => {
                        infowindow.close();
                        state.infowindow = infowindow
                    });
                    state.markers.push(marker);
                });
                // 地點群組marker Cluster
                state.markerCluster = new markerClusterer.MarkerClusterer({
                    map: state.map,
                    markers: state.markers,
                });
                state.map.fitBounds(bounds);
            },

            // 產生地圖標示_行程
            setTravelMarker(state) {
                if (state.markers && state.markerCluster) {
                    state.markerCluster.clearMarkers();
                    state.markerCluster = null
                    state.markers = [];
                } else if (state.markers) {
                    this.state.markers.forEach((marker) => {
                        marker.setMap(null)
                    });
                    state.markers = [];
                }
                //markers.setMap(null);
                // 產生地點marker
                let iofSpots = 0
                for (i = 0; i < state.travel.length; i++) {
                    state.travel[i].map((position, j) => {
                        iofSpots++
                        const marker = new google.maps.Marker({
                            position: { lat: position.lat, lng: position.lng },
                            label: `${iofSpots}`,   //其他屬性，可以先略過
                            // title: position.title,
                            map: state.map,
                        });
                        // 產生infowindow
                        let contentString =
                            `<div id="info">
                                            <p style="color:black">${position.name}</p>
                                    </div>`
                        const infowindow = new google.maps.InfoWindow({
                            content: contentString,
                            disableAutoPan: false,
                        });
                        // 滑過marker開啟infowindow
                        marker.addListener("mouseover", () => {
                            //if (this.state.infowindow) { this.state.infowindow.close() };
                            infowindow.open({
                                anchor: marker,
                                map: state.map,
                                shouldFocus: false,
                            });
                            state.infowindow = infowindow
                        });
                        marker.addListener("mouseout", () => {
                            infowindow.close();
                            state.infowindow = infowindow
                        });
                        state.markers.push(marker);
                    });
                }

            },

            // 計算行程時間 & 畫路線
            calcRoute(state) {
                console.log(state.travel)
                state.travelTime = [];
                let request = null;
                let route = [];
                let directionsService = new google.maps.DirectionsService();  // 宣告google行程服務
                if (state.directionsRenderer) {
                    state.directionsRenderer.setMap(null)
                }
                state.directionsRenderer = new google.maps.DirectionsRenderer({  // 宣告google畫路線服務
                    suppressMarkers: true,
                });
                //行程變成同一條路徑，上限25個
                for (i = 0; i < state.travel.length; i++) {
                    for (j = 0; j < state.travel[i].length; j++) {
                        route.push(state.travel[i][j])
                    }
                }
                // 總行程數 = 1 離開方程式
                if (route.length < 2) {
                    console.log(`行程數<2 行程數為 ${route.length}`)
                    return
                    // 總行程數 = 2 只需要起始點和終點
                } else if (route.length == 2) {
                    console.log(`行程數=2 行程數為 ${route.length}`)
                    request = {
                        origin: { lat: route[0].lat, lng: route[0].lng },  //起點
                        destination: { lat: route[1].lat, lng: route[1].lng },  //終點
                        travelMode: 'DRIVING', //開車
                    }
                } else {
                    // 總行程數 > 2 加入停靠站
                    console.log(`行程數>2 行程數為 ${route.length}`)
                    const waypts = [];
                    for (i = 1; i < route.length - 1; i++) {
                        waypts.push({ location: { lat: route[i].lat, lng: route[i].lng } })
                    }
                    request = {
                        origin: { lat: route[0].lat, lng: route[0].lng },  //起點
                        destination: { lat: route[route.length - 1].lat, lng: route[route.length - 1].lng },  //終點
                        waypoints: waypts, //中途停靠點
                        travelMode: 'DRIVING', //開車
                    };
                }
                state.directionsRenderer.setMap(state.map); // 設定畫路線顯示在地圖上
                // request放入Google行程服務，得到結果
                directionsService.route(request, function (result, status) {
                    if (status == 'OK') {
                        //儲存行程時間陣列
                        for (i = 0; i < result.routes[0].legs.length; i++) {
                            state.directionsRenderer.setDirections(result);  // 把路線結果傳給畫路線服務
                            // console.log(state.travelTime)
                            console.log(result.routes[0].legs[i].duration.value)
                            state.travelTime.push(result.routes[0].legs[i].duration.value) //時間(秒)，number
                            // state.travelTime[i].push(result.routes[0].legs[j].duration.value) //行程時間分不同天，尚未成功
                            //result回傳的東西有很多，有興趣可以研究
                        }
                    }
                });



                //不同天的行程分開計算
                //for (i = 0; i < state.travel.length; i++) {
                //    state.travelTime.push([])
                //    console.log(state.travelTime)
                //    console.log(`第${i}天`)
                //    多個點，加上中間停靠站
                //    if (state.travel[i].length > 2) {
                //        建立行程request
                //        console.log(`行程 > 2, 行程數量為: ${state.travel[i].length}`)
                //        const waypts = [];
                //        for (j = 1; j < state.travel[i].length - 1; j++) {
                //            waypts.push({ location: { lat: state.travel[i][j].lat, lng: state.travel[i][j].lng } })
                //        }
                //        request = {
                //            origin: { lat: state.travel[i][0].lat, lng: state.travel[i][0].lng }, 起點
                //        destination: { lat: state.travel[i][state.travel[i].length - 1].lat, lng: state.travel[i][state.travel[i].length - 1].lng }, 終點
                //        waypoints: waypts, 中途停靠點
                //        travelMode: 'DRIVING', 開車
                //        };
                //        兩個點，只要給起點和終點就好
                //    } else if (state.travel[i].length == 2) {
                //        console.log(`行程 = 2, 行程數量為: ${state.travel[i].length}`)
                //        request = {
                //            origin: { lat: state.travel[i][0].lat, lng: state.travel[i][0].lng }, 起點
                //        destination: { lat: state.travel[i][1].lat, lng: state.travel[i][1].lng }, 終點
                //        travelMode: 'DRIVING', 開車
                //        }
                //        一個點，路線無法計算，跳出
                //    } else {
                //        console.log(`行程 < 2, 行程數量為: ${state.travel[i].length}`)
                //        continue;
                //    }
                //    request放入Google行程服務，得到結果
                //    directionsService.route(request, function (result, status) {
                //        if (status == 'OK') {
                //            儲存行程時間陣列
                //            for (j = 0; j < result.routes[0].legs.length; j++) {
                //                console.log(state.travelTime)
                //                console.log(result.routes[0].legs[j].duration.value)
                //                state.travelTime.push(result.routes[0].legs[j].duration.value) 時間(秒)，number
                //                state.travelTime[i].push(result.routes[0].legs[j].duration.value) 行程時間分不同天，尚未成功
                //                result回傳的東西有很多，有興趣可以研究
                //            }
                //        }
                //    });
                //}
                console.log(`travelTime:`)
                console.log(state.travelTime)

            },
            updateSchedule(state, status) {
                let startTime = new Date(status.startDate)
                let endTime = new Date(status.endDate)
                let endTime2 = new Date(status.details[0][0].startTime)

                for (let i = 0; i < status.details.length; i++) {
                    this.state.travel.push([])
                    this.state.duringDate.push(startTime.toLocaleDateString())
                    startTime = startTime.setDate(startTime.getDate() + 1)
                    startTime = new Date(startTime)
                    //
                    datetime = new Date(status.details[i][0].startTime)
                    let time = ""
                    let hour = datetime.getHours() + 8
                    let minute = datetime.getMinutes()
                    //處理時分
                    if (Number(hour) > 24) {
                        hour = hour - 24
                    }
                    if (Number(hour) < 10) {
                        hour = "0" + hour
                    }
                    if (Number(minute) < 10) {
                        minute = "0" + minute
                    }
                    time = hour + ":" + minute
                    console.log(time);
                    this.state.datetime.push(time)

                    for (let j = 0; j < status.details[i].length; j++) {
                        let startTime = new Date(status.details[i][j].startTime);
                        let endTime = new Date(status.details[i][j].endTime);

                        let timestay = (endTime.getTime() - startTime.getTime()) / (1000 * 60);
                        console.log(timestay)
                        hour = startTime.getHours() + 8
                        minute = startTime.getMinutes()
                        if (Number(hour) > 24) {
                            hour = hour - 24
                        }
                        if (Number(hour) < 10) {
                            hour = "0" + hour
                        }
                        if (Number(minute) < 10) {
                            minute = "0" + minute
                        }
                        startTime = hour + ":" + minute

                        hour = endTime.getHours() + 8
                        minute = endTime.getMinutes()
                        if (Number(hour) > 24) {
                            hour = hour - 24
                        }
                        if (Number(hour) < 10) {
                            hour = "0" + hour
                        }
                        if (Number(minute) < 10) {
                            minute = "0" + minute
                        }
                        endTime = hour + ":" + minute

                        this.state.travel[i].push({
                            startTime: startTime,
                            endTime: endTime,
                            placeId: status.details[i][j].place.placeId,
                            name: status.details[i][j].place.name,
                            description: status.details[i][j].place.description,
                            tel: status.details[i][j].place.tel,
                            add: status.details[i][j].place.add,
                            lat: status.details[i][j].place.lat,
                            lng: status.details[i][j].place.lng,
                            region: status.details[i][j].place.region,
                            town: status.details[i][j].place.town,
                            class: status.details[i][j].place.class,
                            opentime: status.details[i][j].place.opentime,
                            closetime: status.details[i][j].place.closetime,
                            //
                            min: timestay,
                        })
                    }
                }
            },
        },

        getters: {

            //setTimer(datetime){
            //    let time = new Date(datetime)
            //    let hour = datetime.getHours()+8
            //    let minute = datetime.getMinutes()
            //    if (hour > 10) {
            //        hour ="0"+hour
            //    }
            //    if (minute > 10) {
            //        minute ="0"+minute
            //    }
            //    time = hour+":"+minute
            //    return time
            //}
        },

        //非同步function，由組件呼叫使用
        actions: {
            axiosLoad(context, payload) {
                axios.post("@Url.Action("selectDetail","Schedule")", payload)
                    .then(res => {
                        context.commit('updateSchedule', res.data)
                    })
                    .catch(err => console.log("err"))
            },
            //由組件傳入行程資料呼叫後端存入資料庫,payload存放行程資料
            axiosSave(context, payload) {
                axios.post("@Url.Action("setSchedule","Schedule")", payload)
                    .then(console.log("success"))
                    .catch(err => console.log("err"))
            },

            //由組件傳入條件呼叫後端搜尋,payload存放搜尋條件
            axiosSearch(context, payload) {
                axios.post("@Url.Action("selectPlaceFilter","Schedule")", payload)
                    .then(res => { context.commit('updateData', res.data) }).then(() => { context.commit('setPlaceMarker') })
                    .catch(err => console.log(err))
            },

            //載入地圖 設置中心點
            initMap({ commit }) {
                commit('initMap')
                axios.post("@Url.Action("getPlace","Schedule")", { lat: 22.639500487835534, lng: 120.3030081895357 })
                    .then(res => { commit('updateData', res.data) }).then(() => { commit('setPlaceMarker') })

            },
        }
    })

    //日期、儲存行程vue
    new Vue({
        store,
        el: '#app',
        data() {
            return {
                selectDatelocal: [],
                selectDateEndlocal: [],
                saveData: [],
            }
        },
        computed: {
            travel() {
                return this.$store.state.travel
            },
            datetime() {
                return this.$store.state.datetime
            },
            duringDate() {
                return this.$store.state.duringDate
            },
        },
        mounted() {
            let id = window.location.search.substring(1)
            if (id != "") {
                this.$store.dispatch('axiosLoad', { ScheduleId: id })
                //
                //if (this.travel.length == 0) {
                //    window.location.search = "";
                //}
            }
        },
        methods: {
            //編排日期
            culDate() {

                let startTime = new Date(this.selectDatelocal)
                let endTime = new Date(this.selectDateEndlocal)
                let day = (endTime - startTime) / (1000 * 3600 * 24) + 1

                this.duringDate.length = 0
                this.datetime.length = 0

                if (this.selectDateEndlocal > this.selectDatelocal || this.selectDateEndlocal == this.selectDatelocal) {

                    for (let i = 0; i < day; i++) {
                        this.duringDate.push(startTime.toLocaleDateString())
                        startTime = startTime.setDate(startTime.getDate() + 1)
                        startTime = new Date(startTime)
                        this.datetime.push('09:00')
                    }

                    if (this.travel.length == 0) {
                        for (let i = 0; i < day; i++) {
                            this.travel.push([])
                        }
                    } else if (this.travel.length <= day) {

                        for (let i = 0; i < day - this.travel.length; i++) {
                            this.travel.push([])
                        }

                    } else if (this.travel.length > day) {

                        for (let i = 0; i < this.travel.length - day; i++) {
                            let lastIndex = this.travel.length - 1

                            for (let j = 0; j < this.travel[lastIndex].length; j++) {
                                this.travel[lastIndex - 1].push(this.travel[lastIndex][j])
                            }
                            this.travel.pop()
                        }
                    }

                } else {
                    alert('重新選擇日期')
                }
            },

            //儲存行程
            saveSchedule() {
                for (let i = 0; i < this.travel.length; i++) {
                    this.saveData.push([]);
                    for (let j = 0; j < this.travel[i].length; j++) {
                        this.saveData[i].push({
                            startTime: new Date(this.duringDate[i] + ' ' + this.travel[i][j].startTime),
                            endTime: new Date(this.duringDate[i] + ' ' + this.travel[i][j].endTime),
                            weatherWarning: false,
                            pop: 10,
                            temperature: 25,
                            uvi: 5,
                            place: { placeId: this.travel[i][j].placeId, town: this.travel[i][j].town }
                        })
                    }

                }
                this.$store.dispatch('axiosSave',
                    {
                        StartDate: new Date(this.duringDate[0]),
                        EndDate: new Date(this.duringDate[this.duringDate.length - 1]),
                        WeatherWarning: false,
                        title: "123",
                        details: this.saveData,
                    })
                alert("儲存成功")
            },
        },
    })

    //地圖vue
    new Vue({
        store,
        el: '#app3',
        mounted() {
            this.$store.dispatch('initMap')
        },
    })

    //行程組件vue
    Vue.component('vuedraggable', window.vuedraggable.name)
    new Vue({
        store,
        el: '#app4',
        data() {
            return {
                drag: true,
            }
        },

        computed: {
            travel() {
                return this.$store.state.travel;
            },
            selectPlaces() {
                return this.$store.state.selectPlaces
            },
            datetime() {
                return this.$store.state.datetime
            },
            duringDate() {
                return this.$store.state.duringDate
            }
        },

        mounted() {
            //this.$store.dispatch('axiosTest')
        },

        methods: {
            //刪除景點
            remove: function (day, view) {
                this.travel[day].splice(view, 1)
                this.$store.commit("cultime")
                this.$store.commit('setTravelMarker')
                this.$store.commit('calcRoute')
            },

            //減少停留時間
            reduceStay(dayIndex, veiwIndex) {
                this.travel[dayIndex][veiwIndex].min -= 30
                if (this.travel[dayIndex][veiwIndex].min < 0) {
                    this.travel[dayIndex][veiwIndex].min = 0
                }
                this.cultime()
            },

            //增加停留時間
            addStay(dayIndex, veiwIndex) {
                this.travel[dayIndex][veiwIndex].min += 30
                if (this.travel[dayIndex][veiwIndex].min > 600) {
                    this.travel[dayIndex][veiwIndex].min = 600
                }
                this.cultime()
            },

            //拖曳啟動
            onStart() {
                this.drag = true;
            },

            //拖曳結束
            onEnd() {
                this.drag = false;
                this.$store.commit('setTravelMarker');
                this.$store.commit('calcRoute')
            },

            //計算時間
            cultime() {
                this.$store.commit("cultime")
            },

            //計算小時小數點
            fixNumber(val) {
                return val.toFix(1)
            }
        },


        template:
            `
                                <div>
                                    <div class="itxst schedule">
                                        <div class="col" v-for="(day,dayIndex) in travel">
                                            <div class="title"> {{duringDate[dayIndex]}}</div>
                                                <hr>旅遊時間 :
                                                <input type="time" v-model="datetime[dayIndex]" @@change="cultime()">

                                                <draggable v-model="travel[dayIndex]" group="site" animation="300" dragClass="dragClass"
                                                    ghostClass="ghostClass" chosenClass="chosenClass" @@start="onStart" @@end="onEnd"
                                                    @@change="cultime()" class="min">
                                                    <transition-group>
                                                        <div class="item" v-for="(view,veiwIndex) in day" :key="view">
                                                            {{view.startTime}}-{{view.endTime}}<br>
                                                            {{view.name}}<br>
                                                            {{view.add}}<br>
                                                            <div class="adjtime">
                                                                停留時間:
                                                                <i class="fa-solid fa-plus" @@click="addStay(dayIndex,veiwIndex)"></i>
                                                                {{view.min/60}}小時
                                                                <i class="fa-solid fa-minus" @@click="reduceStay(dayIndex,veiwIndex)"></i>
                                                            </div>
                                                            <button @@click="remove(dayIndex,veiwIndex)">刪</button>
                                                        </div>
                                                    </transition-group>
                                                </draggable>
                                        </div>
                                    </div>
                                </div>
                                `
    })

    //搜尋組件vue
    new Vue({
        store,
        el: '#app2',
        data() {
            return {
                countys: [
                    '基隆市', '新北市', '臺北市', '桃園市', '新竹縣', '新竹市', '苗栗縣', '臺中市', '彰化縣',
                    '南投縣', '雲林縣', '嘉義縣', '嘉義市', '臺南市', '高雄市', '屏東縣', '宜蘭縣', '花蓮縣',
                    '臺東縣', '澎湖縣', '連江縣', '金門縣'
                ],
                acitivitys: ['文化', '生態', '古蹟', '廟宇', '藝術', '小吃特產', '國家公園', '國家風景區', '休閒農業', '溫泉', '自然風景', '遊憩', '體育健身', '其他'],
                selectCounty: [],
                selectAcitivity: [],
            }
        },
        computed: {
            travel() {
                return this.$store.state.travel
            },
            selectPlaces() {
                return this.$store.state.selectPlaces
            },
        },
        methods: {
            //搜尋景點
            search() {
                if (this.selectCounty.length > 0 || this.selectAcitivity.length > 0) {
                    this.$store.dispatch('axiosSearch', { selectCounty: this.selectCounty, selectAcitivity: this.selectAcitivity })
                }
            },

            // 新增景點
            addview: function (index) {
                this.travel[0].push({
                    startTime: '',
                    endTime: '',
                    placeId: this.selectPlaces[index].placeId,
                    name: this.selectPlaces[index].name,
                    description: this.selectPlaces[index].description,
                    tel: this.selectPlaces[index].tel,
                    add: this.selectPlaces[index].add,
                    lat: this.selectPlaces[index].lat,
                    lng: this.selectPlaces[index].lng,
                    region: this.selectPlaces[index].region,
                    town: this.selectPlaces[index].town,
                    class: this.selectPlaces[index].class,
                    opentime: this.selectPlaces[index].opentime,
                    closetime: this.selectPlaces[index].closetime,
                    min: this.selectPlaces[index].timestay,
                })
                this.$store.commit('setTravelMarker')
                this.$store.commit("cultime")
                this.$store.commit('calcRoute')

            },
        },

        template:
            `
                        <div class="itxst">
                            <div class="lbl">
                                <div class="cy">
                                    <span v-for="(county,index) in countys">
                                        <input @@change="search" type="checkbox" :value="county" v-model="selectCounty" :id="county">
                                        <label :for="county">{{county}}</label>
                                    </span>
                                </div>
                                <hr>
                                <div class="cat">
                                    <span v-for="(acitivity,index) in acitivitys">

                                        <input @@change="search" type="checkbox" :value="index+1" v-model="selectAcitivity" :id="index+1">
                                        <label :for="index+1">{{acitivity}}</label>
                                    </span>
                                </div>
                                <hr>



                                    </div>
                                    <div class="col2">
                                        <div v-for="(view,selIndex) in selectPlaces">
                                            <div class="item2">
                                                <h3>{{view.name}}</h3>
                                                <i class="fa-solid fa-phone">{{view.tel}}</i>
                                                <i class="fa-solid fa-house-chimney">{{view.add}}</i>
                                                <i>營業時間{{view.opentime}}-{{view.closetime}}</i>
                                                <i>建議停留{{view.timestay}}分</i>
                                                <button @@click="addview(selIndex)" class="btn btn-primary">新增至行程</button>

                                            </div>
                                        </div>
                                </div>
                            </div>
                            `
    })

    //下方選擇日期vue
    new Vue({
        store,
        el: '#app5',
        data() {
            return {
                toleft: 0,
            }
        },

        computed: {
            travel() {
                return this.$store.state.travel;
            },
            selectPlaces() {
                return this.$store.state.selectPlaces
            },
            datetime() {
                return this.$store.state.datetime
            },
            duringDate() {
                return this.$store.state.duringDate
            },
            move() {
                return {
                    left: this.toleft + 'px',
                }
            },




        },

        mounted() {

        },

        methods: {
            //刪除景點
            remove: function (day, view) {
                this.travel[day].splice(view, 1)
                this.$store.commit("cultime")
            },

            //計算時間
            cultime() {
                this.$store.commit("cultime")
            },
            tol() {
                let x = document.getElementsByClassName('daysbox')[0].clientWidth
                let y = document.getElementsByClassName('btnbox')[0].clientWidth
                let z = Math.abs(document.getElementsByClassName('daysbox')[0].offsetLeft) + 270
                if (y < x && z < x) {
                    this.toleft -= 150
                }
                else {
                    this.toleft = this.toleft
                }

            },
            tor() {
                if (this.toleft != 0) {
                    this.toleft += 150
                }
                else {
                    this.toleft = 0
                }

            },





        },


        template:
            `   <div >
                                    <h3>預設自訂行程1</h3>
                                    <div>
                                        <input type="date">
                                        <input type="date">
                                    </div>
                                        <ul class="daysbox" :style="move">
                                        <li class="days" v-for="(day,dayIndex) in travel">第{{dayIndex+1}}天 </li>
                                        </ul>
                                    <div class="btnbox">
                                            <i @@click="tol" class="fa-solid fa-angle-left left"></i>
                                            <i @@click="tor" class="fa-solid fa-angle-right right"></i>
                                    </div>
                                </div>
                            `
    })





</script>
}
