@{
    ViewData["Title"] = "規劃行程 -";
    <!-- Layout = null; -->
}
@section Style{
<!-- <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" asp-append-version="true" /> -->
<link rel="stylesheet" href="~/css/main.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<style>
    .footer__waves,
    .chat {
        display: none;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.0/css/bootstrap.min.css" />



}

<div class="arrange__body">
    <div class="arrange__contain" id="moveup">
        <video autoplay muted loop plays-inline class="arrange__contain-video" poster="~/file/photo/highway-f.jpg">
            <source src="~/file/video/highway-f.mp4" type="video/mp4">
        </video>
        <div class="datepicker"></div>
        <div class="datepicker__content">
            <div id="app">
                <input id="st" placeholder="開始時間" type="text" onfocus="(this.type='date')" onblur="(this.type='text')"
                    v-model="selectDatelocal">
                <input id="et" placeholder="結束時間" type="text" onfocus="(this.type='date')" onblur="(this.type='text')"
                    v-model="selectDateEndlocal">
                @* <input id="test" type="text" name="daterange" value="" /> *@



                <button @@click="culDate" class="btn btn-primary" href="#map">開始</button>
                <!-- <button @@click="saveSchedule" class="btn btn-primary">儲存行程</button> -->
            </div>
        </div>
        <div class="journey__map">
            <div class="sidebar" id="sidebar">
                <div class="sidebar__grid">
                    <div class="grid-item-t" id="grid-item-t">
                        <div id="app5"></div>

                    </div>
                    <div class="grid-item-m" id="grid-item-m">

                        <div id="app4"></div>

                    </div>
                    <div class="grid-item-b">
                        <button class="btn btn-primary" id="open">展開</button>
                        <button id="save" @@click="saveSchedule" class="btn btn-danger">儲存行程</button>
                    </div>
                </div>
            </div>

            <div class="sift">
                <p class="lbtn" id="sift-l" style="display:none">篩選</p>
            </div>

            <div class="sidebar-hide" id="sidebar-hide">

                <div id="app2"></div>
            </div>

            <div class="sift">
                @* <i class="fas fa-caret-right rbtn" id="sift-r"></i> *@
                <p class="rbtn" id="sift-r">篩選</p>
            </div>

            <div class="mapbox" id="app3">
                <div id="floating-panel">
                    <img v-if="isTravel == false" @@click="changeView" :src="gpsURL" width="50" alt="gps" type="button">
                    <img v-if="isTravel == true" @@click="changeView" :src="mapURL" width="50" alt="map" type="button">
                </div>
                <div id="map" class="map-pag2"></div>
            </div>
        </div>

    </div>
</div>



@section Scripts{
<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBtVnIXm-IWFLMzIL_XlbCjLyQjSuEVVhk"></script>
<script src="https://unpkg.com/@@googlemaps/markerclusterer/dist/index.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://unpkg.com/vuex@3"></script>
<script src="https://www.itxst.com/package/sortable/Sortable.min.js"></script>
<script src="https://www.itxst.com/package/vuedraggable/vuedraggable.umd.min.js"></script>
@* tiempicker *@
<script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js"></script>
<script>

    let id = window.location.search.substring(1)
    if (id != "") {
        $('.arrange__contain-video').css('height', '0')
        setTimeout(function () {
            $('.arrange__contain-video').css('display', 'none')
        }, 200);
        $('#navbarC').addClass("sticky")
        $('.datepicker').css('display', 'none')
        $('.datepicker__content').css({
            'top': '5%',
            'left': '30%',
            'z-index': '5',
            'width': '30%',
            'display': 'unset',
        })

        $('#app input').css('display', 'none')
        $('#app button').css('display', 'none')
    }



    let wwwroot = "@Url.Content("~/file/photo")"
    document.getElementById("sift-l").addEventListener('click', function () {
        document.getElementById("sidebar-hide").classList.toggle("sidebar-hide-tg")


    })

    document.getElementById("sift-r").addEventListener('click', function () {
        document.getElementById("sidebar-hide").classList.toggle("sidebar-hide-tg")
    })



    $('#open').click(function () {
        if ($('#sidebar')[0].clientWidth < 301) {
            $('#sidebar').addClass('sidebar-tg').removeClass('sidebar')
            $('.btnbox-r').css('display', 'none')
            $('.btnbox-l').css('display', 'none')
            $('.col').css('display', 'inline-block')
            $('.daysbox').css('left', '0px')
            $('#sift-l').css('display', '')

        } else {
            $('#sidebar').removeClass('sidebar-tg').addClass('sidebar')
            $('.btnbox-r').css('display', '')
            $('.btnbox-l').css('display', '')
            $('.col').css('display', '')
            $('#sift-l').css('display', 'none')

        }
    })

</script>


<script>
    const store = new Vuex.Store({
        state: {
            map: null,
            travel: [],//旅遊行程
            selectPlaces: [],//搜尋結果
            datetime: [],//每日時間
            duringDate: [],//旅遊期間日期
            markers: [], // 地圖Marker
            markerCluster: null, // 地圖Cluster
            directionResult: null,
            directionsRenderer: null,
            daysindex: 0,
            isTravel: false,
            title: "行程",
            scheduleId: 0,
            icon: [ // Marker icon
                { // 一般景點
                    url: "@Url.Content("~/file/photo/mountain.png")",
                    scaledSize: new google.maps.Size(50, 50),
                    labelOrigin: new google.maps.Point(25, 17)
                },
                { // 餐廳
                    url: "@Url.Content("~/file/photo/restaurant.png")",
                    scaledSize: new google.maps.Size(50, 50),
                    labelOrigin: new google.maps.Point(25, 17)
                },
                { // 旅館
                    url: "@Url.Content("~/file/photo/hotel-sign.png")",
                    scaledSize: new google.maps.Size(50, 50),
                    labelOrigin: new google.maps.Point(25, 17)
                },
                { // 行程
                    url: "@Url.Content("~/file/photo/placeholder.png")",
                    scaledSize: new google.maps.Size(50, 50),
                    labelOrigin: new google.maps.Point(25, 17)
                },
            ],

            selectWeather: [],
            searchPlace: { selectType: "", selectCounty: [], selectAcitivity: [], lat: null, lng: null, sistance: 0 },

            infoPicture: [
                "@Url.Content("~/classPhoto/class01.jpg")",
                "@Url.Content("~/classPhoto/class02.jpg")",
                "@Url.Content("~/classPhoto/class03.jpg")",
                "@Url.Content("~/classPhoto/class04.jpg")",
                "@Url.Content("~/classPhoto/class05.jpg")",
                "@Url.Content("~/classPhoto/class06.jpg")",
                "@Url.Content("~/classPhoto/class07.jpg")",
                "@Url.Content("~/classPhoto/class08.jpg")",
                "@Url.Content("~/classPhoto/class09.jpg")",
                "@Url.Content("~/classPhoto/class10.jpg")",
                "@Url.Content("~/classPhoto/class11.jpg")",
                "@Url.Content("~/classPhoto/class12.jpg")",
                "@Url.Content("~/classPhoto/class13.jpg")",
                "@Url.Content("~/classPhoto/class14.jpg")",
                "@Url.Content("~/classPhoto/class15.jpg")",
                "@Url.Content("~/classPhoto/class16.jpg")",
            ],
        },

        //由action傳入值,更新state狀態
        mutations: {
            //更新state 搜尋結果
            updateData(state, status) {
                state.selectPlaces.length = 0;
                state.selectPlaces = status
            },
            updateWeather(state, status) {
                state.selectWeather.length = 0;
                state.selectWeather = status
            },

            //計算行程表時間
            cultime() {
                let hr
                let min
                let addhr
                for (let j = 0; j < this.state.travel.length; j++) {
                    let timestamp = this.state.datetime[j]
                    for (let i = 0; i < this.state.travel[j].length; i++) {
                        if (i > 0) {
                            hr = timestamp.substring(0, 2)
                            min = timestamp.substring(3, 5)
                            addhr = parseInt((Number(min) + Number(this.state.travel[j][i - 1].roam)) / 60)
                            hr = Number(hr) + Number(addhr)
                            min = (Number(min) + Number(this.state.travel[j][i - 1].roam)) % 60
                            if (hr > 24) {
                                hr = hr - 24
                            }
                            if (hr < 10) {
                                hr = '0' + hr
                            }
                            if (min < 10) {
                                min = '0' + min
                            }
                            timestamp = hr + ':' + min
                        }


                        this.state.travel[j][i].startTime = timestamp
                        hr = timestamp.substring(0, 2)
                        min = timestamp.substring(3, 5)
                        addhr = parseInt((Number(min) + Number(this.state.travel[j][i].min)) / 60)

                        hr = Number(hr) + Number(addhr)
                        min = (Number(min) + Number(this.state.travel[j][i].min)) % 60
                        if (hr > 24) {
                            hr = hr - 24
                        }
                        if (hr < 10) {
                            hr = '0' + hr
                        }
                        if (min < 10) {
                            min = '0' + min
                        }
                        timestamp = hr + ':' + min
                        this.state.travel[j][i].endTime = timestamp

                        let now = new Date()
                        now.setDate(now.getDate() + 7)
                        let travelDate = new Date(this.state.duringDate[j])

                        this.state.travel[j][i].minT = 30
                        this.state.travel[j][i].maxT = ""
                        this.state.travel[j][i].pop12h = ""
                        this.state.travel[j][i].uvi = ""


                        if (now > travelDate) {

                            this.state.selectWeather.find(object => {
                                if (this.state.travel[j][i].town == object.locationsName) {
                                    let weatherStart = new Date(object.startTime)
                                    let year = weatherStart.getFullYear()
                                    let month = weatherStart.getMonth()
                                    let date = weatherStart.getDate()
                                    weatherStart = new Date(year, month, date)

                                    if (travelDate.getTime() == weatherStart.getTime()) {
                                        this.state.travel[j][i].minT = object.minT
                                        this.state.travel[j][i].maxT = object.maxT
                                        this.state.travel[j][i].pop12h = object.pop12h
                                        this.state.travel[j][i].uvi = object.uvi
                                    }

                                }
                            })
                        }
                    }
                }

            },

            initMap(state) {
                state.map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 22.639500487835534, lng: 120.3030081895357 },
                    zoom: 12,
                    mapId: '1d3a304bcea5789e',
                    mapTypeControl: false,  // 換地圖類型
                    streetViewControl: false,  // 街道檢視
                    fullscreenControl: false, // 全螢幕顯示
                    clickableIcons: false,   // 可不可以點地圖上的點
                    scaleControl: true,
                    maxZoom: 18,
                    minZoom: 8,
                });

                state.map.addListener("zoom_changed", () => {
                    if (state.infowindow) { state.infowindow.close() };
                    if (state.searchPlace.selectCounty.length == 0) {
                        store.commit('zoomCenterChange')

                    }
                })
                state.map.addListener("dragend", () => {
                    if (state.infowindow) { state.infowindow.close() };
                    if (state.searchPlace.selectCounty.length == 0) {
                        store.commit('zoomCenterChange')
                    }
                })
            },

            // zoom或center變動傳回中心點和距離
            zoomCenterChange(state) {
                state.searchPlace.lat = state.map.getCenter().lat();
                state.searchPlace.lng = state.map.getCenter().lng();
                state.searchPlace.distance = 46080 / (2 ** state.map.getZoom());
                store.dispatch('axiosSearch')
            },

            //搜尋條件更新
            searchFilter(state, payload) {
                state.searchPlace.selectCounty = payload.selectCounty;
                state.searchPlace.selectAcitivity = payload.selectAcitivity;
                state.searchPlace.selectType = payload.selectType;
                store.dispatch('axiosSearch')
            },


            // 產生景點標示
            setPlaceMarker(state) {
                if (state.isTravel == true) { return }
                if (state.markers && state.markerCluster) {
                    state.markerCluster.clearMarkers();
                    state.markerCluster = null
                    state.markers = [];
                } else if (state.markers && state.directionsRenderer) {
                    this.state.markers.forEach((marker) => {
                        marker.setMap(null)
                    });
                    state.markers = [];
                    state.directionsRenderer.setMap(null)
                    state.directionsRenderer = null
                }
                if (state.selectPlaces.length == 0) {
                    return
                }
                let date = [];
                let today = new Date();
                for (let i = 0; i < 7; i++) {
                    date.push(today.getMonth() + 1 + '/' + today.getDate());
                    today.setDate(today.getDate() + 1)
                }


                const bounds = new google.maps.LatLngBounds();
                let viewObj = {};
                let townWeather = [];
                let infopic = null;
                // 產生地點marker
                state.selectPlaces.map((position, i) => {
                    townWeather.length = 0;
                    state.selectWeather.find(object => {
                        if (position.town == object.locationsName) {
                            townWeather.push(object);
                        };
                    })
                    switch (position.class) {
                        case 15:
                            iconPlace = state.icon[1]
                            infopic = state.infoPicture[14]
                            break;
                        case 16:
                            iconPlace = state.icon[2]
                            infopic = state.infoPicture[15]
                            break;
                        default:
                            iconPlace = state.icon[0]
                            infopic = state.infoPicture[position.class - 1]
                            break;
                    }

                    const marker = new google.maps.Marker({
                        position: { lat: position.lat, lng: position.lng },
                        title: position.name,
                        icon: iconPlace,
                    });

                    bounds.extend(marker.position);
                    // 產生infowindow
                    addView = function () {
                        state.travel[0].push({
                            startTime: '',
                            endTime: '',
                            placeId: viewObj.placeId,
                            name: viewObj.name,
                            description: viewObj.description,
                            tel: viewObj.tel,
                            add: viewObj.add,
                            lat: viewObj.lat,
                            lng: viewObj.lng,
                            region: viewObj.region,
                            town: viewObj.town,
                            class: viewObj.class,
                            opentime: viewObj.opentime,
                            closetime: viewObj.closetime,
                            min: viewObj.timestay,
                        });
                        store.commit('calcRoute')
                        store.commit('cultime')

                    };
                    let contentString =
                        `   <div class="infowindow">
                                <div class="infowindow_bar row row-cols-2" >
                                    <div class="infowindow_bar_title col-10">${position.name}</div>          
                                    <div class="infowindow_bar_divbutton col-2">
                                        <div class="infowindow_bar_button" type="button" onclick="addView()">
                                            + <i class="fa-solid fa-calendar-days"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="infowindow_part row">
                                    <div class="infowindow_img col-4">
                                        <img src=${infopic} class="infowindow_picture">
                                    </div>
                                    <div class="infowindow_info col-8">
                                        <p><i class="fa-solid fa-house-crack" style="color:#1C0059"></i> ${position.add}</p>
                                        <p><i class="fa-solid fa-phone" style="color:#260078"></i> ${position.tel}</p>
                                        <p><i class="fa-solid fa-clock" style="color:#3500A8"></i> ${position.opentime}-${position.closetime}</p>
                                            <table>
                                                <tr>
                                                    <td></td><td>${date[0]}</td><td>${date[1]}</td><td>${date[2]}</td><td>${date[3]}</td><td>${date[4]}</td><td>${date[5]}</td><td>${date[6]}</td>
                                                </tr>
                                                <tr>
                                                    <td>降雨機率</td><td>${townWeather[0].pop12h}%</td><td>${townWeather[1].pop12h}%</td><td>${townWeather[2].pop12h}%</td><td>${townWeather[3].pop12h}%</td><td>${townWeather[4].pop12h}%</td><td>${townWeather[5].pop12h}%</td><td>${townWeather[6].pop12h}%</td>
                                                </tr>
                                                <tr>
                                                    <td>溫度</td><td>${townWeather[0].minT}-${townWeather[0].maxT}</td><td>${townWeather[1].minT}-${townWeather[1].maxT}</td><td>${townWeather[2].minT}-${townWeather[2].maxT}</td><td>${townWeather[3].minT}-${townWeather[3].maxT}</td><td>${townWeather[4].minT}-${townWeather[4].maxT}</td><td>${townWeather[5].minT}-${townWeather[5].maxT}</td><td>${townWeather[6].minT}-${townWeather[6].maxT}</td>
                                                </tr>
                                                <tr>
                                                    <td>紫外線</td><td>${townWeather[0].uvi}</td><td>${townWeather[1].uvi}</td><td>${townWeather[2].uvi}</td><td>${townWeather[3].uvi}</td><td>${townWeather[4].uvi}</td><td>${townWeather[5].uvi}</td><td>${townWeather[6].uvi}</td>
                                                </tr>
                                            </table>
                                    </div>
                                </div>
                                <button class="infowindow_intro" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample"
                                                    aria-expanded="false" aria-controls="collapseExample">
                                                    景點介紹
                                </button>
                                <div class="collapse" id="collapseExample">
                                    <div class="infowindow_detail" style="text-indent:2em">
                                                        ${position.description}
                                    </div>
                                </div>
                            </div>
                        `
                    const infowindow = new google.maps.InfoWindow({
                        content: contentString,
                        disableAutoPan: false,
                    });
                    // 點marker開啟infowindow
                    marker.addListener("click", () => {
                        if (state.infowindow) { state.infowindow.close() };
                        infowindow.open({
                            anchor: marker,
                            map: state.map,
                            shouldFocus: false,

                        });
                        viewObj = position
                        state.infowindow = infowindow
                    });
                    state.markers.push(marker);
                });
                // 地點群組marker Cluster
                state.markerCluster = new markerClusterer.MarkerClusterer({
                    map: state.map,
                    markers: state.markers,
                });
                // marker定位
                if (state.searchPlace.selectCounty.length > 0) {
                    state.map.fitBounds(bounds);
                }
            },

            // 產生行程標示
            setTravelMarker(state) {
                let travelPlace = 0
                for (i = 0; i < state.travel.length; i++) {
                    travelPlace += state.travel[i].length
                }
                if (state.isTravel && travelPlace > 0) {
                    if (state.markers && state.markerCluster) {
                        state.markerCluster.clearMarkers();
                        state.markerCluster = null
                        state.markers = [];
                    } else if (state.markers) {
                        this.state.markers.forEach((marker) => {
                            marker.setMap(null)
                        });
                        state.markers = [];
                    }

                    let date = [];
                    let today = new Date();
                    for (let i = 0; i < 7; i++) {
                        date.push(today.getMonth() + 1 + '/' + today.getDate());
                        today.setDate(today.getDate() + 1)
                    }
                    // 產生地點marker
                    const bounds = new google.maps.LatLngBounds();
                    let iofSpots = 0
                    let townWeather = [];
                    let infopic = null;
                    for (i = 0; i < state.travel.length; i++) {
                        state.travel[i].map((position, j) => {
                            townWeather.length = 0;
                            state.selectWeather.find(object => {
                                if (position.town == object.locationsName) {
                                    townWeather.push(object);
                                };
                            })
                            iofSpots++
                            const marker = new google.maps.Marker({
                                position: { lat: position.lat, lng: position.lng },
                                label: {
                                    text: `${iofSpots}`,
                                    fontWeight: "bold",
                                },
                                title: position.name,
                                map: state.map,
                                icon: state.icon[3],
                            });
                            bounds.extend(marker.position);
                            switch (position.class) {
                                case 15:
                                    iconPlace = state.icon[1]
                                    infopic = state.infoPicture[14]
                                    break;
                                case 16:
                                    iconPlace = state.icon[2]
                                    infopic = state.infoPicture[15]
                                    break;
                                default:
                                    iconPlace = state.icon[0]
                                    infopic = state.infoPicture[position.class - 1]
                                    break;
                            }
                            // 產生infowindow
                            let contentString =
                                `
                            <div class="infowindow">
                                <div class="infowindow_bar row row-cols-2" >
                                    <div class="infowindow_bar_title col-10">
                                     ${position.name}
                                    </div>
                                    <div class="infowindow_bar_divbutton col-2">
                                        <div class="infowindow_bar_button" type="button" onclick="addView()">

                                        </div>
                                    </div>
                                </div>
                                <div class="infowindow_part row">
                                    <div class="infowindow_img col-4">
                                        <img src=${infopic} class="infowindow_picture">
                                        @* <img src="https://www.taiwan.net.tw/pic.ashx?qp=1/big_scenic_spots/pic_11548_18.jpg&sizetype=3" class="infowindow_picture"> *@
                                    </div>
                                    <div class="infowindow_info col-8">
                                        <p><i class="fa-solid fa-house-crack" style="color:#1C0059"></i> ${position.add}</p>                                     
                                        <p><i class="fa-solid fa-phone" style="color:#260078"></i> ${position.tel}</p>
                                        <p><i class="fa-solid fa-clock" style="color:#3500A8"></i> ${position.opentime}-${position.closetime}</p>
                                                                                                <table>
                                                                <tr>
                                                                    <td></td><td>${date[0]}</td><td>${date[1]}</td><td>${date[2]}</td><td>${date[3]}</td><td>${date[4]}</td><td>${date[5]}</td><td>${date[6]}</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>降雨機率</td><td>${townWeather[0].pop12h}%</td><td>${townWeather[1].pop12h}%</td><td>${townWeather[2].pop12h}%</td><td>${townWeather[3].pop12h}%</td><td>${townWeather[4].pop12h}%</td><td>${townWeather[5].pop12h}%</td><td>${townWeather[6].pop12h}%</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>溫度</td><td>${townWeather[0].minT}-${townWeather[0].maxT}</td><td>${townWeather[1].minT}-${townWeather[1].maxT}</td><td>${townWeather[2].minT}-${townWeather[2].maxT}</td><td>${townWeather[3].minT}-${townWeather[3].maxT}</td><td>${townWeather[4].minT}-${townWeather[4].maxT}</td><td>${townWeather[5].minT}-${townWeather[5].maxT}</td><td>${townWeather[6].minT}-${townWeather[6].maxT}</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>紫外線</td><td>${townWeather[0].uvi}</td><td>${townWeather[1].uvi}</td><td>${townWeather[2].uvi}</td><td>${townWeather[3].uvi}</td><td>${townWeather[4].uvi}</td><td>${townWeather[5].uvi}</td><td>${townWeather[6].uvi}</td>
                                                                </tr>
                                                            </table>
                                    </div>
                                </div>
                                <button class="infowindow_intro" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample"
                                    aria-expanded="false" aria-controls="collapseExample">
                                    景點介紹
                                </button>
                                <div class="collapse" id="collapseExample">
                                    <div class="infowindow_detail" style="text-indent:2em">
                                        ${position.description}
                                    </div>
                                </div>
                            </div>
                            `
                            const infowindow = new google.maps.InfoWindow({
                                content: contentString,
                                disableAutoPan: false,
                            });
                            // 點擊marker開啟infowindow
                            marker.addListener("click", () => {
                                if (this.state.infowindow) { this.state.infowindow.close() };
                                infowindow.open({
                                    anchor: marker,
                                    map: state.map,
                                    shouldFocus: false,
                                });
                                state.infowindow = infowindow
                            });
                            state.markers.push(marker);
                        });
                    }
                    if (iofSpots == 1) {
                        state.map.fitBounds(bounds)
                    }
                }
            },

            //單日行程標示與路線
            setDailyMarker(state, day) {
                if (state.isTravel == false) { return }
                if (state.travel[day].length > 0) {
                    if (state.markers && state.markerCluster) {
                        state.markerCluster.clearMarkers();
                        state.markerCluster = null
                        state.markers = [];
                    } else if (state.markers) {
                        this.state.markers.forEach((marker) => {
                            marker.setMap(null)
                        });
                        state.markers = [];
                    }

                    let date = [];
                    let today = new Date();
                    for (let i = 0; i < 7; i++) {
                        date.push(today.getMonth() + 1 + '/' + today.getDate());
                        today.setDate(today.getDate() + 1)
                    }

                    if (state.directionsRenderer) {
                        state.directionsRenderer.setMap(null)
                        state.directionsRenderer = null
                    }
                    // 產生地點marker
                    let iofSpots = 0
                    const bounds = new google.maps.LatLngBounds();
                    let townWeather = [];
                    let infopic = null;
                    state.travel[day].map((position, j) => {
                        townWeather.length = 0;
                        state.selectWeather.find(object => {
                            if (position.town == object.locationsName) {
                                townWeather.push(object);
                            };
                        })
                        iofSpots++
                        const marker = new google.maps.Marker({
                            position: { lat: position.lat, lng: position.lng },
                            label: {
                                text: `${iofSpots}`,
                                fontWeight: "bold",
                            },
                            title: position.name,
                            map: state.map,
                            icon: state.icon[3],
                        });
                        bounds.extend(marker.position);
                        switch (position.class) {
                            case 15:
                                iconPlace = state.icon[1]
                                infopic = state.infoPicture[14]
                                break;
                            case 16:
                                iconPlace = state.icon[2]
                                infopic = state.infoPicture[15]
                                break;
                            default:
                                iconPlace = state.icon[0]
                                infopic = state.infoPicture[position.class - 1]
                                break;
                        }
                        // 產生infowindow
                        let contentString =
                            `
                                <div class="infowindow">
                                    <div class="infowindow_bar row row-cols-2" >
                                        <div class="infowindow_bar_title col-10">
                                         ${position.name}
                                        </div>
                                        <div class="infowindow_bar_divbutton col-2">
                                            <div class="infowindow_bar_button" type="button" onclick="addView()">

                                            </div>
                                        </div>
                                    </div>
                                    <div class="infowindow_part row">
                                        <div class="infowindow_img col-4">
                                            <img src=${infopic} class="infowindow_picture">
                                        </div>
                                        <div class="infowindow_info col-8">
                                            <p><i class="fa-solid fa-house-crack" style="color:#1C0059"></i> ${position.add}</p>                                     
                                            <p><i class="fa-solid fa-phone" style="color:#260078"></i> ${position.tel}</p>
                                            <p><i class="fa-solid fa-clock" style="color:#3500A8"></i> ${position.opentime}-${position.closetime}</p>
                                                                                         <table>
                                                                <tr>
                                                                    <td></td><td>${date[0]}</td><td>${date[1]}</td><td>${date[2]}</td><td>${date[3]}</td><td>${date[4]}</td><td>${date[5]}</td><td>${date[6]}</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>降雨機率</td><td>${townWeather[0].pop12h}%</td><td>${townWeather[1].pop12h}%</td><td>${townWeather[2].pop12h}%</td><td>${townWeather[3].pop12h}%</td><td>${townWeather[4].pop12h}%</td><td>${townWeather[5].pop12h}%</td><td>${townWeather[6].pop12h}%</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>溫度</td><td>${townWeather[0].minT}-${townWeather[0].maxT}</td><td>${townWeather[1].minT}-${townWeather[1].maxT}</td><td>${townWeather[2].minT}-${townWeather[2].maxT}</td><td>${townWeather[3].minT}-${townWeather[3].maxT}</td><td>${townWeather[4].minT}-${townWeather[4].maxT}</td><td>${townWeather[5].minT}-${townWeather[5].maxT}</td><td>${townWeather[6].minT}-${townWeather[6].maxT}</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>紫外線</td><td>${townWeather[0].uvi}</td><td>${townWeather[1].uvi}</td><td>${townWeather[2].uvi}</td><td>${townWeather[3].uvi}</td><td>${townWeather[4].uvi}</td><td>${townWeather[5].uvi}</td><td>${townWeather[6].uvi}</td>
                                                                </tr>
                                                            </table>
                                        </div>
                                    </div>
                                    <button class="infowindow_intro" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample"
                                        aria-expanded="false" aria-controls="collapseExample">
                                        景點介紹
                                    </button>
                                    <div class="collapse" id="collapseExample">
                                        <div class="infowindow_detail" style="text-indent:2em">
                                            ${position.description}
                                        </div>
                                    </div>
                                </div>
                                `
                        const infowindow = new google.maps.InfoWindow({
                            content: contentString,
                            disableAutoPan: false,
                        });
                        // 點擊marker開啟infowindow
                        marker.addListener("click", () => {
                            if (this.state.infowindow) { this.state.infowindow.close() };
                            infowindow.open({
                                anchor: marker,
                                map: state.map,
                                shouldFocus: false,
                            });
                            state.infowindow = infowindow
                        });
                        state.markers.push(marker);
                    });

                    // 畫路線
                    let request = null;
                    let route = [];
                    let directionsService = new google.maps.DirectionsService();  // 宣告google行程服務
                    //行程變成同一條路徑，上限25個

                    for (j = 0; j < state.travel[day].length; j++) {
                        route.push(state.travel[day][j])
                    }

                    // 總行程數 = 1 離開方程式
                    if (route.length < 2) {
                        state.map.fitBounds(bounds);
                        return
                    } else {
                        // 總行程數 >=  2 加入停靠站                        
                        const waypts = [];
                        for (i = 1; i < route.length - 1; i++) {
                            waypts.push({ location: { lat: route[i].lat, lng: route[i].lng } })
                        }
                        request = {
                            origin: { lat: route[0].lat, lng: route[0].lng },  //起點
                            destination: { lat: route[route.length - 1].lat, lng: route[route.length - 1].lng },  //終點
                            waypoints: waypts, //中途停靠點
                            travelMode: 'DRIVING', //開車
                        };
                    }

                    // request放入Google行程服務，得到結果
                    directionsService.route(request, function (result, status) {
                        if (status == 'OK') {
                            state.directionsRenderer = new google.maps.DirectionsRenderer({  // 宣告google畫路線服務
                                suppressMarkers: true,
                                directions: result,
                                map: state.map
                            })
                        }
                    });
                }
            },

            // 計算行程時間 & 畫路線
            calcRoute(state) {
                if (state.directionsRenderer) {
                    state.directionsRenderer.setMap(null)
                    state.directionsRenderer = null
                }
                let request = null;
                let route = [];
                let directionsService = new google.maps.DirectionsService();  // 宣告google行程服務

                //行程變成同一條路徑，上限25個
                for (i = 0; i < state.travel.length; i++) {
                    for (j = 0; j < state.travel[i].length; j++) {
                        route.push(state.travel[i][j])
                    }
                }
                // 總行程數 = 1 離開方程式
                if (route.length < 2) {
                    return
                } else {
                    // 總行程數 >= 2 加入停靠站                    
                    const waypts = [];
                    for (i = 1; i < route.length - 1; i++) {
                        waypts.push({ location: { lat: route[i].lat, lng: route[i].lng } })
                    }
                    request = {
                        origin: { lat: route[0].lat, lng: route[0].lng },  //起點
                        destination: { lat: route[route.length - 1].lat, lng: route[route.length - 1].lng },  //終點
                        waypoints: waypts, //中途停靠點
                        travelMode: 'DRIVING', //開車
                    };
                }

                // request放入Google行程服務，得到結果
                directionsService.route(request, function (result, status) {
                    if (status == 'OK') {
                        if (state.isTravel == true) {
                            state.directionsRenderer = new google.maps.DirectionsRenderer({  // 宣告google畫路線服務
                                suppressMarkers: true,
                                directions: result,
                                map: state.map
                            });
                        }
                        //儲存行程時間陣列                        
                        let dayList = result.routes[0].legs
                        let n = 0
                        for (let i = 0; i < state.travel.length; i++) {
                            for (let j = 0; j < state.travel[i].length; j++) {
                                if (n < dayList.length) {
                                    state.travel[i][j].roam = parseInt(dayList[n].duration.value / 60)
                                    n++
                                }
                            }
                        }
                        store.commit('cultime')
                    }
                });
            },
            changeView(state) {
                let numTravel = 0
                for (i = 0; i < state.travel.length; i++) {
                    for (j = 0; j < state.travel[i].length; j++) {
                        numTravel++
                    }
                }
                if (state.isTravel == false && numTravel > 0) {
                    state.isTravel = true;
                    store.commit('setTravelMarker')
                    store.commit('calcRoute')
                } else {
                    state.isTravel = false;
                    store.commit('setPlaceMarker')
                }
            },

            updateSchedule(state, status) {
                let startTime = new Date(status.startDate)
                let endTime = new Date(status.endDate)
                let endTime2 = new Date(status.details[0][0].startTime)
                state.scheduleId = status.scheduleId
                state.title = status.title
                for (let i = 0; i < status.details.length; i++) {
                    this.state.travel.push([])
                    this.state.duringDate.push(startTime.toLocaleDateString())
                    startTime = startTime.setDate(startTime.getDate() + 1)
                    startTime = new Date(startTime)
                    //
                    if (status.details[i].length > 0) {


                        datetime = new Date(status.details[i][0].startTime)
                        let time = ""
                        let hour = datetime.getHours()
                        let minute = datetime.getMinutes()
                        //處理時分
                        if (Number(hour) > 24) {
                            hour = hour - 24
                        }
                        if (Number(hour) < 10) {
                            hour = "0" + hour
                        }
                        if (Number(minute) < 10) {
                            minute = "0" + minute
                        }
                        time = hour + ":" + minute
                        this.state.datetime.push(time)
                    } else {
                        this.state.datetime.push("09:00")
                    }

                    for (let j = 0; j < status.details[i].length; j++) {
                        let startTime = new Date(status.details[i][j].startTime);
                        let endTime = new Date(status.details[i][j].endTime);

                        let timestay = (endTime.getTime() - startTime.getTime()) / (1000 * 60);
                        hour = startTime.getHours()
                        minute = startTime.getMinutes()
                        if (Number(hour) > 24) {
                            hour = hour - 24
                        }
                        if (Number(hour) < 10) {
                            hour = "0" + hour
                        }
                        if (Number(minute) < 10) {
                            minute = "0" + minute
                        }
                        startTime = hour + ":" + minute

                        hour = endTime.getHours()
                        minute = endTime.getMinutes()
                        if (Number(hour) > 24) {
                            hour = hour - 24
                        }
                        if (Number(hour) < 10) {
                            hour = "0" + hour
                        }
                        if (Number(minute) < 10) {
                            minute = "0" + minute
                        }
                        endTime = hour + ":" + minute

                        this.state.travel[i].push({
                            startTime: startTime,
                            endTime: endTime,
                            placeId: status.details[i][j].place.placeId,
                            name: status.details[i][j].place.name,
                            description: status.details[i][j].place.description,
                            tel: status.details[i][j].place.tel,
                            add: status.details[i][j].place.add,
                            lat: status.details[i][j].place.lat,
                            lng: status.details[i][j].place.lng,
                            region: status.details[i][j].place.region,
                            town: status.details[i][j].place.town,
                            class: status.details[i][j].place.class,
                            opentime: status.details[i][j].place.opentime,
                            closetime: status.details[i][j].place.closetime,
                            //
                            min: timestay,
                        })
                    }
                }
                store.commit('calcRoute');
                store.commit('cultime')
            },
            getLocation(state, { view, index }) {
                if (state.isTravel == true) { return }
                state.map.setZoom(17)
                state.map.setCenter({ lat: view.lat, lng: view.lng })
                google.maps.event.trigger(state.markers[index], 'click')
                // marker因為包在cluster裡面，一定要先展開才叫的到，只好先拉近再呼叫
            },

        },

        getters: {
        },

        //非同步function，由組件呼叫使用
        actions: {
            axiosLoad(context, payload) {
                axios.post("@Url.Action("selectDetail","Schedule")", payload)
                    .then(res => {
                        context.commit('updateSchedule', res.data)
                    })
                    .catch(err => console.log(err))
            },
            //由組件傳入行程資料呼叫後端存入資料庫,payload存放行程資料
            axiosSave(context, payload) {
                axios.post("@Url.Action("setSchedule","Schedule")", payload)
                    .then(() => {
                        Swal.fire("儲存成功").then(() => { window.location.href = '@Url.Action("UserCatelog","Home")'; });
                    })//跳頁修改
                    .catch(err => console.log("err"))
            },

            //由組件傳入條件呼叫後端搜尋
            axiosSearch(context) {
                axios.post("@Url.Action("selectPlaceFilter","Schedule")", context.state.searchPlace)
                    .then(res => { context.commit('updateData', res.data) }).then(() => { context.commit('setPlaceMarker') })
                    .catch(err => console.log(err))
            },

            //載入地圖 設置中心點
            initMap({ commit }) {
                commit('initMap')
                axios.post("@Url.Action("getPlace","Schedule")", { lat: 22.639500487835534, lng: 120.3030081895357 })
                    .then(res => {
                        commit('updateData', res.data);
                        axios.post("@Url.Action("selectWeather","Schedule")")
                            .then(res => {
                                commit('updateWeather', res.data);
                                commit('setPlaceMarker');
                            })
                    })
            },
        }
    })

    //日期、儲存行程vue
    new Vue({
        store,
        el: '#app',
        data() {
            return {
                selectDatelocal: [],
                selectDateEndlocal: [],
                saveData: [],
            }
        },
        computed: {
            travel() {
                return this.$store.state.travel
            },
            datetime() {
                return this.$store.state.datetime
            },
            duringDate() {
                return this.$store.state.duringDate
            },
        },
        mounted() {
            let id = window.location.search.substring(1)
            if (id != "") {
                this.$store.dispatch('axiosLoad', { ScheduleId: id })
            }
            this.selectDateEndlocal = this.duringDate[this.duringDate.length - 1]
            if (this.duringDate.length > 0) {

            }
        },
        methods: {
            moveTime() {
                if (window.innerWidth > 401) {
                    if ($('#st').val() && $('#et').val()) {

                        $('.arrange__contain-video').css('height', '0')
                        $('.datepicker').css('display', 'none')
                        $('#navbarC').addClass("sticky")
                        $('.datepicker__content').css({
                            'top': '5%',
                            'left': '30%',
                            'z-index': '5',
                            'width': '30%',
                            'display': 'unset',
                        })
                        $('#app input').css({
                            'min-width': '30%',
                            'font-size': '1.4rem',
                        }).focus().css('max-width', '30%')
                        $('#app button').css({
                            'font-size': '1rem',
                            'width': '35%',
                            'padding': '0',
                            'border-radius': '0',
                            'background': 'transparent',
                            'color': 'black',
                            'border': '2px solid',

                        })
                        $('#app button')[0].textContent = "更新日期"


                        setTimeout(function () {
                            $('.arrange__contain-video').css('display', 'none')
                        }, 200);

                    }
                }
            },
            //編排日期
            culDate() {

                let startTime = new Date(this.selectDatelocal)
                let endTime = new Date(this.selectDateEndlocal)
                let day = (endTime - startTime) / (1000 * 3600 * 24) + 1
                this.duringDate.length = 0
                this.datetime.length = 0

                if (this.selectDateEndlocal > this.selectDatelocal || this.selectDateEndlocal == this.selectDatelocal) {
                    this.moveTime();
                    for (let i = 0; i < day; i++) {
                        this.duringDate.push(startTime.toLocaleDateString())
                        startTime = startTime.setDate(startTime.getDate() + 1)
                        startTime = new Date(startTime)
                        this.datetime.push('09:00')
                    }

                    if (this.travel.length == 0) {
                        for (let i = 0; i < day; i++) {
                            this.travel.push([])
                        }
                    } else if (this.travel.length <= day) {
                        let daydiff = day - this.travel.length
                        for (let i = 0; i < daydiff; i++) {
                            this.travel.push([])
                        }

                    } else if (this.travel.length > day) {

                        let daydiff = this.travel.length - day
                        for (let i = 0; i < daydiff; i++) {
                            let lastIndex = this.travel.length - 1

                            for (let j = 0; j < this.travel[lastIndex].length; j++) {
                                this.travel[lastIndex - 1].push(this.travel[lastIndex][j])
                            }
                            this.travel.pop()
                        }
                        this.$store.commit("cultime")
                    }

                } else {
                    Swal.fire('重新選擇日期')
                }
            },

            //儲存行程
            saveSchedule() {
                for (let i = 0; i < this.travel.length; i++) {
                    this.saveData.push([]);
                    for (let j = 0; j < this.travel[i].length; j++) {
                        this.saveData[i].push({
                            startTime: new Date(this.duringDate[i] + ' ' + this.travel[i][j].startTime),
                            endTime: new Date(this.duringDate[i] + ' ' + this.travel[i][j].endTime),
                            weatherWarning: false,
                            place: { placeId: this.travel[i][j].placeId, town: this.travel[i][j].town }
                        })
                    }
                }

                this.$store.dispatch('axiosSave',
                    {
                        StartDate: new Date(this.duringDate[0]),
                        EndDate: new Date(this.duringDate[this.duringDate.length - 1]),
                        WeatherWarning: false,
                        title: "123",
                        details: this.saveData,
                    })

            },
        },
    })

    //地圖vue
    new Vue({
        store,
        el: '#app3',
        data: {
            gpsURL: "@Url.Content("~/file/photo/gps.png")",
            mapURL: "@Url.Content("~/file/photo/map.png")",
        },
        computed: {
            isTravel() {
                return this.$store.state.isTravel;
            },
        },
        mounted() {
            this.$store.dispatch('initMap')
        },
        methods: {
            changeView() {
                this.$store.commit('changeView')
            },
            testDaily() {
                this.$store.commit('setDailyMarker', 0)
            }
        },
    })

    //行程組件vue
    Vue.component('vuedraggable', window.vuedraggable.name)
    new Vue({
        store,
        el: '#app4',
        data() {
            return {
                drag: true,
            }
        },

        computed: {
            travel() {
                return this.$store.state.travel;
            },
            selectPlaces() {
                return this.$store.state.selectPlaces
            },
            datetime() {
                return this.$store.state.datetime
            },
            duringDate() {
                return this.$store.state.duringDate
            },
        },

        mounted() {
        },

        methods: {
            //刪除景點
            remove: function (day, view) {
                this.travel[day].splice(view, 1)

                this.$store.commit('calcRoute')
                this.$store.commit('setTravelMarker')
                this.$store.commit('cultime')
            },

            //減少停留時間
            reduceStay(dayIndex, veiwIndex) {
                this.travel[dayIndex][veiwIndex].min -= 30
                if (this.travel[dayIndex][veiwIndex].min < 0) {
                    this.travel[dayIndex][veiwIndex].min = 0
                }
                this.cultime()
            },

            //增加停留時間
            addStay(dayIndex, veiwIndex) {
                this.travel[dayIndex][veiwIndex].min += 30
                if (this.travel[dayIndex][veiwIndex].min > 600) {
                    this.travel[dayIndex][veiwIndex].min = 600
                }
                this.cultime()
            },

            //拖曳啟動
            onStart() {
                this.drag = true;
            },

            //拖曳結束
            onEnd() {
                this.drag = false;
                this.$store.commit('setTravelMarker');
                this.$store.commit('calcRoute')
                this.$store.commit('cultime')
            },

            //計算時間
            cultime() {
                this.$store.commit('calcRoute')
                this.$store.commit('cultime')
                this.travel.push([]);
                this.travel.pop();
            },

            //計算小時小數點
            fixNumber(val) {
                return val.toFix(1)
            }
        },


        template:
            `
                        <div>
                            <div class="itxst schedule">
                                <div class="col" v-for="(day,dayIndex) in travel">
                                    <div class="title"> {{duringDate[dayIndex]}}

                                         <input type="time" v-model="datetime[dayIndex]" @@change="cultime()">
                                    </div>



                                        <draggable v-model="travel[dayIndex]" group="site" animation="300" dragClass="dragClass"
                                            ghostClass="ghostClass" chosenClass="chosenClass" @@start="onStart" @@end="onEnd"
                                            @@change="cultime()" class="min">
                                            <transition-group>


                                                          <div class="item" v-for="(view,veiwIndex) in day" :key="view">


                                                            <div class="weather-info">
                                                                <p>{{view.startTime}}-{{view.endTime}}</p>
                                                                <div v-if="view.pop12h>20"><img src="${wwwroot}/rain.gif" :title="'降雨機率:'+view.pop12h+'%'"/></div>
                                                                <div v-if="view.minT<25"><img src="${wwwroot}/cold.gif" :title="'最低溫:'+view.minT+'°C'"/></div>
                                                                <div v-if="view.maxT>34"><img src="${wwwroot}/hot.gif" :title="'最高溫:'+view.maxT+'°C'"/></div>
                                                                <div v-if="view.uvi>9"><img src="${wwwroot}/sun.gif" :title="'紫外線指數:'+view.uvi"/></div>
                                                            </div>


                                                    <h3>{{view.name}}</h3>
                                                    <p>{{view.add}}</p>
                                                    <div class="adjtime">
                                                        <p>停留時間:</p>
                                                        <p><i class="fas fa-plus" @@click="addStay(dayIndex,veiwIndex)"></i></p>
                                                        <p class="mw-25 min-w-25">{{view.min/60}}小時</p>
                                                        <p><i class="fas fa-minus" @@click="reduceStay(dayIndex,veiwIndex)"></i></p>
                                                    </div>
                                                    <button @@click="remove(dayIndex,veiwIndex)"><i class="fa-solid fa-trash-can"></i></button>




                                            <div class="row cols-2 d-flex justify-content-center" v-if="veiwIndex<day.length-1">
                                                <div class="col-1 bg-white " >
                                                </div>

                                                <div class="col-9 bg-white betweenBox bg-line " >
                                                    <i class="fa-solid fa-car-side">行車時間 : </i>{{view.roam}}分鐘
                                                </div>
                                            </div>



                                        </div>
                                    </transition-group>
                                </draggable>
                        </div>
                    </div>
                </div>
                `
    })

    //搜尋組件vue
    new Vue({
        store,
        el: '#app2',
        data() {
            return {
                type: ["景點", "餐飲", "旅宿"],
                countys: [
                    '基隆市', '新北市', '臺北市', '桃園市', '新竹縣', '新竹市', '苗栗縣', '臺中市', '彰化縣',
                    '南投縣', '雲林縣', '嘉義縣', '嘉義市', '臺南市', '高雄市', '屏東縣', '宜蘭縣', '花蓮縣',
                    '臺東縣', '澎湖縣', '連江縣', '金門縣'
                ],
                acitivitys: ['文化', '生態', '古蹟', '廟宇', '藝術', '小吃特產', '國家公園', '國家風景區', '休閒農業', '溫泉', '自然風景', '遊憩', '體育健身', '其他'],
                selectType: '景點',
                selectCounty: [],
                selectAcitivity: [],
                isDefault: 0,
                display: "",
            }
        },
        mounted() {

        },
        computed: {
            travel() {
                return this.$store.state.travel
            },
            selectPlaces() {
                return this.$store.state.selectPlaces
            },
            daysindex() {
                return this.$store.state.daysindex
            },
            checkrd() {
                return this.display
            },
        },
        methods: {
            //搜尋景點
            search() {
                if (this.selectCounty.length > 3) {
                    this.selectCounty.splice(0, 1)
                }
                switch (this.selectType) {
                    case '景點':
                        this.selectType = '景點'
                        this.display = ''
                        break;
                    case '餐飲':
                        this.selectType = '餐飲'
                        this.display = 'display:none'
                        break;
                    case '旅宿':
                        this.selectType = '旅宿'
                        this.display = 'display:none'
                        break;
                }

                if (this.selectAcitivity.length > 5) {
                    this.selectAcitivity.splice(0, 1)
                }

                //if (this.selectCounty.length > 0 || this.selectAcitivity.length > 0) {
                this.$store.commit('searchFilter', { selectCounty: this.selectCounty, selectAcitivity: this.selectAcitivity, selectType: this.selectType })
                //}
            },

            // 新增景點
            addview: function (index) {
                this.travel[this.daysindex].push({
                    startTime: '',
                    endTime: '',
                    placeId: this.selectPlaces[index].placeId,
                    name: this.selectPlaces[index].name,
                    description: this.selectPlaces[index].description,
                    tel: this.selectPlaces[index].tel,
                    add: this.selectPlaces[index].add,
                    lat: this.selectPlaces[index].lat,
                    lng: this.selectPlaces[index].lng,
                    region: this.selectPlaces[index].region,
                    town: this.selectPlaces[index].town,
                    class: this.selectPlaces[index].class,
                    opentime: this.selectPlaces[index].opentime,
                    closetime: this.selectPlaces[index].closetime,
                    min: this.selectPlaces[index].timestay,
                })
                this.$store.commit('setTravelMarker')
                this.$store.commit('calcRoute')
                this.$store.commit('cultime')

            },
            focusLocation(view, index) {
                this.$store.commit('getLocation', { view, index })
            },
        },

        template:
            `
                            <div class="itxst">
                                <div class="lbl">
                                    <div class="cy">
                                        <span v-for="(county,index) in countys">
                                            <input @@change="search" type="checkbox" :value="county" v-model="selectCounty" :id="county">
                                            <label :for="county">{{county}}</label>
                                        </span>
                                    </div>
                                    <hr>
                                     <div class="picker">
                                        <span v-for="(atype,index) in type">
                                            <input @@change="search" type="radio" :value="atype" v-model="selectType" :id="atype">
                                            <label :for="atype">{{atype}}</label>
                                        </span>
                                    </div>
                                    <hr>
                                    <div class="cat" :style="checkrd">
                                        <span v-for="(acitivity,index) in acitivitys">

                                    <input @@change="search" type="checkbox" :value="index+1" v-model="selectAcitivity" :id="index+1">
                                    <label :for="index+1">{{acitivity}}</label>
                                </span>
                            </div>
                            <hr>
                        </div>
                        <div class="col2">
                            <div v-for="(view,selIndex) in selectPlaces">
                                <div class="container item2">
                                    <div class="row" @@click="focusLocation(view,selIndex)">
                                        <h3 class="col-12">{{view.name}}</h3>
                                        <p class="col-12"><i class="fa-solid fa-phone">{{view.tel}}</i></p>
                                        <p class="col-12"><i class="fa-solid fa-house-chimney">{{view.add}}</i></p>
                                        <p class="col-12">營業時間{{view.opentime}}-{{view.closetime}}</p>
                                        <p class="col-12">建議停留{{view.timestay}}分</p>
                                    </div>
                                    <div @@click="addview(selIndex)" class="adto">新增行程</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `
    })

    //下方選擇日期vue
    new Vue({
        store,
        el: '#app5',
        data() {
            return {
                toleft: 0,
                calpositiontotal: 0,
                selectDatelocal: [],
                selectDateEndlocal: [],
                saveData: [],
                title: "",
            }
        },

        computed: {
            selectPlaces() {
                return this.$store.state.selectPlaces
            },
            duringDate() {
                return this.$store.state.duringDate
            },
            daysindex() {
                return this.$store.state.daysindex
            },
            move() {
                return {
                    left: this.toleft + 'px',
                }
            },
            travel() {
                return this.$store.state.travel
            },
            datetime() {
                return this.$store.state.datetime
            },

        },
        methods: {
            culDate() {
                let startTime = new Date(this.selectDatelocal)
                let endTime = new Date(this.selectDateEndlocal)
                let day = (endTime - startTime) / (1000 * 3600 * 24) + 1
                this.duringDate.length = 0
                this.datetime.length = 0
                if (this.selectDateEndlocal > this.selectDatelocal || this.selectDateEndlocal == this.selectDatelocal) {

                    for (let i = 0; i < day; i++) {
                        this.duringDate.push(startTime.toLocaleDateString())
                        startTime = startTime.setDate(startTime.getDate() + 1)
                        startTime = new Date(startTime)
                        this.datetime.push('09:00')
                    }

                    if (this.travel.length == 0) {
                        for (let i = 0; i < day; i++) {
                            this.travel.push([])
                        }
                    } else if (this.travel.length <= day) {

                        for (let i = 0; i < day - this.travel.length; i++) {
                            this.travel.push([])
                        }

                    } else if (this.travel.length > day) {

                        for (let i = 0; i < this.travel.length - day; i++) {
                            let lastIndex = this.travel.length - 1

                            for (let j = 0; j < this.travel[lastIndex].length; j++) {
                                this.travel[lastIndex - 1].push(this.travel[lastIndex][j])
                            }
                            this.travel.pop()
                        }
                    }
                    this.$store.commit("cultime")
                } else {
                    Swal.fire('重新選擇日期')
                }
            },

            tol() {
                let x = document.getElementsByClassName('daysbox')[0].clientWidth
                // let y = document.getElementsByClassName('btnbox')[0].clientWidth
                let y = 270
                let z = Math.abs(document.getElementsByClassName('daysbox')[0].offsetLeft) + 270
                if (y < x && z < x) {
                    this.toleft -= 120
                }
                else {
                    this.toleft = this.toleft
                }

            },
            tor() {
                if (this.toleft != 0) {
                    this.toleft += 120
                }
                else {
                    this.toleft = 0
                }

            },
            calposition(k) {
                this.$store.state.daysindex = k

                d = this.travel.length

                if (document.getElementById('sidebar').clientWidth < 301) {
                    this.calpositiontotal = 0
                    for (i = 0; i < k; i++) {
                        this.calpositiontotal += document.getElementsByClassName('col')[i].clientHeight
                    }
                    document.getElementsByClassName('grid-item-m')[0].scrollTop = this.calpositiontotal
                    this.$store.commit('setDailyMarker', k)
                }


                for (i = 0; i < d; i++) {

                    document.getElementsByClassName('title')[i].style.backgroundColor = ""
                    document.getElementsByClassName('title')[i].style.color = "#fff"
                }


                document.getElementsByClassName('title')[k].style.backgroundColor = "#FBCB0A"

                document.getElementsByClassName('title')[k].style.color = "#000"


            },
            setTitle() {
                this.$store.state.title = this.title;
            }
        },

        template:
            `   <div >
                    <div>
                        <h3><input type="text" @@input="setTitle()" v-model="title" placeholder="請輸入標題" ></h3>
                        </div>
                            <ul class="daysbox" :style="move">
                            <li class="days" v-for="(day,dayIndex) in travel" @@click="calposition(dayIndex)">第{{dayIndex+1}}天 </li>
                            </ul>

                        <div class="btnbox-l" @@click="tor">
                                <i class="fas fa-caret-square-left left"></i>
                        </div>
                        <div class="btnbox-r" @@click="tol">
                                <i class="fas fa-caret-square-right right"></i>
                    </div>
                 </div>
                `
    })

    new Vue({
        store,
        el: '#save',
        data() {
            return {
                selectDatelocal: [],
                selectDateEndlocal: [],
                saveData: [],
            }
        },
        computed: {
            travel() {
                return this.$store.state.travel
            },
            datetime() {
                return this.$store.state.datetime
            },
            duringDate() {
                return this.$store.state.duringDate
            },
        },
        mounted() {

        },
        methods: {


            //儲存行程
            saveSchedule() {
                this.saveData.length = 0
                for (let i = 0; i < this.travel.length; i++) {
                    this.saveData.push([]);
                    for (let j = 0; j < this.travel[i].length; j++) {
                        this.saveData[i].push({
                            startTime: new Date(this.duringDate[i] + ' ' + this.travel[i][j].startTime),
                            endTime: new Date(this.duringDate[i] + ' ' + this.travel[i][j].endTime),
                            weatherWarning: false,
                            place: { placeId: this.travel[i][j].placeId, town: this.travel[i][j].town }
                        })
                    }
                }

                this.$store.dispatch('axiosSave',
                    {
                        ScheduleId: this.$store.state.scheduleId,
                        StartDate: new Date(this.duringDate[0]),
                        EndDate: new Date(this.duringDate[this.duringDate.length - 1]),
                        WeatherWarning: false,
                        title: this.$store.state.title,
                        details: this.saveData,
                    })
            },
        },
    })



</script>


}
