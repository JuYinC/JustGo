// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace JustGo.Models
{
    public partial class TravelContext : DbContext
    {
        public TravelContext()
        {
        }

        public TravelContext(DbContextOptions<TravelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<BlogDetails> BlogDetails { get; set; }
        public virtual DbSet<Place> Place { get; set; }
        public virtual DbSet<Schedule> Schedule { get; set; }
        public virtual DbSet<ScheduleDetails> ScheduleDetails { get; set; }
        public virtual DbSet<UserKeep> UserKeep { get; set; }
        public virtual DbSet<Weather> Weather { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>(entity =>
            {
                entity.Property(e => e.BlogId).HasColumnName("BlogID");

                entity.Property(e => e.Describe)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ImageName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<BlogDetails>(entity =>
            {
                entity.HasKey(e => e.DetailsId)
                    .HasName("PK_DetailsID");

                entity.Property(e => e.DetailsId).HasColumnName("DetailsID");

                entity.Property(e => e.BlogId).HasColumnName("BlogID");

                entity.Property(e => e.Describe).HasMaxLength(300);

                entity.Property(e => e.EndtTime).HasColumnType("datetime");

                entity.Property(e => e.Images).HasMaxLength(300);

                entity.Property(e => e.PlaceId).HasColumnName("PlaceID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.HasOne(d => d.Blog)
                    .WithMany(p => p.BlogDetails)
                    .HasForeignKey(d => d.BlogId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BlogDetails_Blog");
            });

            modelBuilder.Entity<Place>(entity =>
            {
                entity.HasIndex(e => new { e.Lat, e.Lng, e.Class, e.Region }, "IX_Place");

                entity.Property(e => e.PlaceId).HasColumnName("PlaceID");

                entity.Property(e => e.Add)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Closetime).HasMaxLength(5);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IntClosetime).HasColumnName("intClosetime");

                entity.Property(e => e.IntOpentime).HasColumnName("intOpentime");

                entity.Property(e => e.Lat)
                    .HasColumnType("decimal(9, 7)")
                    .HasColumnName("lat");

                entity.Property(e => e.Lng)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("lng");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Opentime).HasMaxLength(5);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Tel).HasMaxLength(12);

                entity.Property(e => e.Town)
                    .IsRequired()
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Schedule>(entity =>
            {
                entity.Property(e => e.ScheduleId).HasColumnName("ScheduleID");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<ScheduleDetails>(entity =>
            {
                entity.HasKey(e => e.DetailsId)
                    .HasName("PK_DeatisID");

                entity.Property(e => e.DetailsId).HasColumnName("DetailsID");

                entity.Property(e => e.EndtTime).HasColumnType("datetime");

                entity.Property(e => e.PlaceId).HasColumnName("PlaceID");

                entity.Property(e => e.ScheduleId).HasColumnName("ScheduleID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Town)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.HasOne(d => d.Schedule)
                    .WithMany(p => p.ScheduleDetails)
                    .HasForeignKey(d => d.ScheduleId)
                    .HasConstraintName("FK_ScheduleDetails_Schedule");
            });

            modelBuilder.Entity<UserKeep>(entity =>
            {
                entity.HasKey(e => e.KeepId)
                    .HasName("PK_KeepID");

                entity.Property(e => e.KeepId).HasColumnName("KeepID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<Weather>(entity =>
            {
                entity.ToTable("weather");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("endTime");

                entity.Property(e => e.Location)
                    .HasMaxLength(30)
                    .HasColumnName("location");

                entity.Property(e => e.LocationsName)
                    .HasMaxLength(30)
                    .HasColumnName("locationsName");

                entity.Property(e => e.MaxT).HasColumnName("maxT");

                entity.Property(e => e.MinT).HasColumnName("minT");

                entity.Property(e => e.Pop12h).HasColumnName("pop12h");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("startTime");

                entity.Property(e => e.Uvi).HasColumnName("uvi");

                entity.Property(e => e.Wx)
                    .HasMaxLength(50)
                    .HasColumnName("wx");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}